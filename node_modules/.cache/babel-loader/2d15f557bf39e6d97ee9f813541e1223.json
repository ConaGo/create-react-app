{"ast":null,"code":"var _jsxFileName = \"/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js\";\nimport React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class Try extends Component {\n  constructor(props) {\n    super(props); // Don't call this.setState() here!\n\n    this.state = {\n      dropdownOpen: false,\n      idCounter: 3,\n      source: {},\n      value: 0,\n      data: {\n        nodes: [{\n          \"id\": \"id1\",\n          \"name\": \"name1\",\n          \"val\": 1,\n          isCity: false,\n          color: 'red',\n          label: 'H'\n        }, {\n          \"id\": \"id2\",\n          \"name\": \"name2\",\n          \"val\": 0.5,\n          isCity: true\n        }],\n        links: [{\n          \"source\": \"id1\",\n          \"target\": \"id2\"\n        }]\n      }\n    };\n    this.handleAddNode = this.handleAddNode.bind(this);\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.handleSetSource = this.handleSetSource.bind(this);\n    this.handleRangeChange = this.handleRangeChange.bind(this);\n  }\n\n  handleAddNode(isCity) {\n    if (Object.keys(this.state.source).length && this.state.source.isCity === !isCity) {\n      this.setState(prevState => ({\n        data: {\n          nodes: [...prevState.data.nodes, {\n            id: \"id\" + prevState.idCounter,\n            name: \"name\" + prevState.idCounter,\n            val: prevState.value / 10\n          }],\n          links: [...prevState.data.links, {\n            source: \"id\" + prevState.idCounter,\n            target: prevState.source.id\n          }]\n        },\n        idCounter: prevState.idCounter + 1\n      }));\n    }\n\n    console.log(this.state);\n  }\n\n  handleAddEdge() {}\n\n  handleSetSource(source) {\n    console.log(source);\n    this.setState({\n      source: source\n    });\n  }\n\n  toggleDropDown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  handleRangeChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    const data = this.state.data;\n    const sourceName = this.state.source.name;\n    const value = this.state.value;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"hallo\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"add a City\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"add a Power Plant\"), React.createElement(Dropdown, {\n      isOpen: this.state.dropdownOpen,\n      toggle: this.toggleDropDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(DropdownToggle, {\n      caret: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"FirstConnection\"), sourceName), React.createElement(DropdownMenu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.data.nodes.map((item, i) => React.createElement(DropdownItem, {\n      key: i,\n      onClick: () => this.handleSetSource(item, i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, item.name)))), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, value), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"5\",\n      value: this.state.value,\n      onChange: this.handleRangeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(ForceGraph2D, {\n      graphData: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js"],"names":["React","Component","ForceGraph2D","Button","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Try","constructor","props","state","dropdownOpen","idCounter","source","value","data","nodes","isCity","color","label","links","handleAddNode","bind","toggleDropDown","handleSetSource","handleRangeChange","Object","keys","length","setState","prevState","id","name","val","target","console","log","handleAddEdge","event","render","sourceName","map","item","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nexport default class Try extends Component {\n    constructor(props) {\n        super(props);\n        // Don't call this.setState() here!\n        this.state = { \n            dropdownOpen: false,\n            idCounter: 3,\n            source: {},\n            value: 0,\n            data: {\n                nodes: [ \n                    { \n                      \"id\": \"id1\",\n                      \"name\": \"name1\",\n                      \"val\": 1,\n                      isCity: false, \n                      color: 'red',\n                      label: 'H'\n                      \n                    },\n                    { \n                      \"id\": \"id2\",\n                      \"name\": \"name2\",\n                      \"val\": 0.5,\n                      isCity: true,\n                    },\n                ],\n                links: [\n                    {\n                        \"source\": \"id1\",\n                        \"target\": \"id2\"\n                    },\n                ]\n            }\n        };\n        this.handleAddNode = this.handleAddNode.bind(this);\n        this.toggleDropDown = this.toggleDropDown.bind(this);\n        this.handleSetSource = this.handleSetSource.bind(this);\n        this.handleRangeChange = this.handleRangeChange.bind(this);\n    }\n    handleAddNode(isCity){\n        if(Object.keys(this.state.source).length && this.state.source.isCity === !isCity){\n            this.setState(prevState => ({\n                data: {\n                    nodes:[\n                        ...prevState.data.nodes,\n                        {\n                            id: \"id\" + prevState.idCounter,\n                            name: \"name\" + prevState.idCounter,\n                            val: prevState.value/10\n                        }                \n                    ],\n                    links: [\n\n                        ...prevState.data.links,\n                        {\n                            source: \"id\" + prevState.idCounter,\n                            target: prevState.source.id\n                        }\n                    ]\n                },\n                idCounter: prevState.idCounter + 1\n            }))\n        }\n        console.log(this.state)\n    }\n    handleAddEdge(){\n    }\n    handleSetSource(source){\n        console.log(source)\n        this.setState({\n            source: source\n        })\n    }\n    toggleDropDown() {\n        this.setState(prevState => ({\n          dropdownOpen: !prevState.dropdownOpen\n        }));\n    }\n    handleRangeChange(event){\n        this.setState({value: event.target.value});\n    }\n    render() {\n        const data = this.state.data\n        const sourceName = this.state.source.name\n        const value = this.state.value\n      return(\n          <div>\n            <p>hallo</p>\n            <Button onClick={()=>this.handleAddNode(true)}>add a City</Button>\n            <Button onClick={()=>this.handleAddNode(false)}>add a Power Plant</Button>\n            \n            <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropDown}>\n                <DropdownToggle caret>\n                    <p>FirstConnection</p>\n                    {sourceName}\n                </DropdownToggle>\n                <DropdownMenu>\n\n                {this.state.data.nodes.map((item, i )=> <DropdownItem key={i} onClick={() => this.handleSetSource(item, i)}>{item.name}</DropdownItem>)}\n\n                </DropdownMenu>\n            </Dropdown>\n            <label>{value}</label>\n            <input type=\"range\" max=\"100\" step=\"5\" value={this.state.value} onChange={this.handleRangeChange}></input>\n            <ForceGraph2D graphData={data}></ForceGraph2D>\n\n          </div>\n          \n      )\n    }\n  }"]},"metadata":{},"sourceType":"module"}