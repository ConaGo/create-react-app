{"ast":null,"code":"var _jsxFileName = \"/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js\";\nimport React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, FormGroup, Label, Input } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class Try extends Component {\n  constructor(props) {\n    super(props); // Don't call this.setState() here!\n\n    this.state = {\n      dropdownOpen: false,\n      idCounter: 3,\n      cityIdCounter: 2,\n      PPIdCounter: 2,\n      source: {},\n      value: 0,\n      data: {\n        nodes: [{\n          \"id\": \"id1\",\n          \"name\": \"name1\",\n          \"val\": 1,\n          isCity: false,\n          color: 'red'\n        }, {\n          \"id\": \"id2\",\n          \"name\": \"name2\",\n          \"val\": 0.5,\n          isCity: true\n        }],\n        links: [{\n          \"source\": \"id1\",\n          \"target\": \"id2\"\n        }]\n      }\n    };\n    this.handleAddNode = this.handleAddNode.bind(this);\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.handleSetSource = this.handleSetSource.bind(this);\n    this.handleRangeChange = this.handleRangeChange.bind(this);\n  }\n\n  handleAddNode(isCity) {\n    console.log(this.state.source.isCity);\n\n    if (Object.keys(this.state.source).length && this.state.source.isCity === !isCity) {\n      this.setState(prevState => ({\n        data: {\n          nodes: [...prevState.data.nodes, {\n            id: \"id\" + prevState.idCounter,\n            name: isCity ? 'City' + prevState.cityIdCounter : 'PowerPlant' + prevState.PPIdCounter,\n            val: prevState.value / 10,\n            isCity: isCity\n          }],\n          links: [...prevState.data.links, {\n            source: \"id\" + prevState.idCounter,\n            target: prevState.source.id\n          }]\n        },\n        idCounter: prevState.idCounter + 1,\n        cityIdCounter: prevState.cityIdCounter + 1,\n        PPIdCounter: prevState.PPIdCounter + 1\n      }));\n    }\n\n    console.log(this.state);\n  }\n\n  handleAddEdge() {}\n\n  handleSetSource(source) {\n    console.log(source);\n    this.setState({\n      source: source\n    });\n  }\n\n  toggleDropDown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  handleRangeChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    const data = this.state.data;\n    const sourceName = this.state.source.name;\n    const value = this.state.value;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"hallo\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"add a City\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"add a Power Plant\"), React.createElement(Dropdown, {\n      isOpen: this.state.dropdownOpen,\n      toggle: this.toggleDropDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(DropdownToggle, {\n      caret: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"FirstConnection\"), sourceName), React.createElement(DropdownMenu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.data.nodes.map((item, i) => React.createElement(DropdownItem, {\n      key: i,\n      onClick: () => this.handleSetSource(item, i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, item.name)))), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, value), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"5\",\n      value: this.state.value,\n      onChange: this.handleRangeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      tag: \"fieldset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Radio Buttons\"), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), ' ', \"Option one is this and that\\u2014be sure to include why it's great\")), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), ' ', \"Option two can be something else and selecting it will deselect option one\")), React.createElement(FormGroup, {\n      check: true,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), ' ', \"Option three is disabled\"))), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), ' ', \"Check me out\"))), React.createElement(ForceGraph2D, {\n      graphData: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js"],"names":["React","Component","ForceGraph2D","Button","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","FormGroup","Label","Input","Try","constructor","props","state","dropdownOpen","idCounter","cityIdCounter","PPIdCounter","source","value","data","nodes","isCity","color","links","handleAddNode","bind","toggleDropDown","handleSetSource","handleRangeChange","console","log","Object","keys","length","setState","prevState","id","name","val","target","handleAddEdge","event","render","sourceName","map","item","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, FormGroup, Label, Input } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nexport default class Try extends Component {\n    constructor(props) {\n        super(props);\n        // Don't call this.setState() here!\n        this.state = { \n            dropdownOpen: false,\n            idCounter: 3,\n            cityIdCounter: 2,\n            PPIdCounter:2,\n            source: {},\n            value: 0,\n            data: {\n                nodes: [ \n                    { \n                      \"id\": \"id1\",\n                      \"name\": \"name1\",\n                      \"val\": 1,\n                      isCity: false, \n                      color: 'red',\n                      \n                      \n                    },\n                    { \n                      \"id\": \"id2\",\n                      \"name\": \"name2\",\n                      \"val\": 0.5,\n                      isCity: true,\n                    },\n                ],\n                links: [\n                    {\n                        \"source\": \"id1\",\n                        \"target\": \"id2\"\n                    },\n                ]\n            }\n        };\n        this.handleAddNode = this.handleAddNode.bind(this);\n        this.toggleDropDown = this.toggleDropDown.bind(this);\n        this.handleSetSource = this.handleSetSource.bind(this);\n        this.handleRangeChange = this.handleRangeChange.bind(this);\n    }\n    handleAddNode(isCity){\n        console.log(this.state.source.isCity)\n        if(Object.keys(this.state.source).length && this.state.source.isCity === !isCity){\n            this.setState(prevState => ({\n                data: {\n                    nodes:[\n                        ...prevState.data.nodes,\n                        {\n                            id: \"id\" + prevState.idCounter,\n                            name: (isCity? 'City'+ prevState.cityIdCounter:'PowerPlant'+ prevState.PPIdCounter) ,\n                            val: prevState.value/10,\n                            isCity: isCity\n                        }                \n                    ],\n                    links: [\n\n                        ...prevState.data.links,\n                        {\n                            source: \"id\" + prevState.idCounter,\n                            target: prevState.source.id\n                        }\n                    ]\n                },\n                idCounter: prevState.idCounter + 1,\n                cityIdCounter:  prevState.cityIdCounter + 1,\n                PPIdCounter:  prevState.PPIdCounter + 1,\n            }))\n        }\n        console.log(this.state)\n    }\n    handleAddEdge(){\n    }\n    handleSetSource(source){\n        console.log(source)\n        this.setState({\n            source: source\n        })\n    }\n    toggleDropDown() {\n        this.setState(prevState => ({\n          dropdownOpen: !prevState.dropdownOpen\n        }));\n    }\n    handleRangeChange(event){\n        this.setState({value: event.target.value});\n    }\n    render() {\n        const data = this.state.data\n        const sourceName = this.state.source.name\n        const value = this.state.value\n      return(\n          <div>\n            <p>hallo</p>\n            <Button onClick={()=>this.handleAddNode(true)}>add a City</Button>\n            <Button onClick={()=>this.handleAddNode(false)}>add a Power Plant</Button>\n            \n            <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropDown}>\n                <DropdownToggle caret>\n                    <p>FirstConnection</p>\n                    {sourceName}\n                </DropdownToggle>\n                <DropdownMenu>\n\n                {this.state.data.nodes.map((item, i )=> <DropdownItem key={i} onClick={() => this.handleSetSource(item, i)}>{item.name}</DropdownItem>)}\n\n                </DropdownMenu>\n            </Dropdown>\n            <label>{value}</label>\n            <input type=\"range\" max=\"100\" step=\"5\" value={this.state.value} onChange={this.handleRangeChange}></input>\n            <div>\n            <FormGroup tag=\"fieldset\">\n          <legend>Radio Buttons</legend>\n          <FormGroup check>\n            <Label check>\n              <Input type=\"radio\" name=\"radio1\" />{' '}\n              Option one is this and that—be sure to include why it's great\n            </Label>\n          </FormGroup>\n          <FormGroup check>\n            <Label check>\n              <Input type=\"radio\" name=\"radio1\" />{' '}\n              Option two can be something else and selecting it will deselect option one\n            </Label>\n          </FormGroup>\n          <FormGroup check disabled>\n            <Label check>\n              <Input type=\"radio\" name=\"radio1\" disabled />{' '}\n              Option three is disabled\n            </Label>\n          </FormGroup>\n        </FormGroup>\n        <FormGroup check>\n          <Label check>\n            <Input type=\"checkbox\" />{' '}\n            Check me out\n          </Label>\n        </FormGroup> \n            </div>\n            <ForceGraph2D graphData={data}></ForceGraph2D>\n\n          </div>\n          \n      )\n    }\n  }"]},"metadata":{},"sourceType":"module"}