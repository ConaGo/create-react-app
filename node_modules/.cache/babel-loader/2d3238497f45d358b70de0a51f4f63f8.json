{"ast":null,"code":"var _jsxFileName = \"/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js\";\nimport React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, FormGroup, Label, Input } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class Try extends Component {\n  constructor(props) {\n    super(props); // Don't call this.setState() here!\n\n    this.handlePlantChange = changeEvent => {\n      this.setState({\n        selectedPlant: changeEvent.target.value\n      });\n    };\n\n    this.state = {\n      dropdownOpen: false,\n      idCounter: 3,\n      cityIdCounter: 2,\n      PPIdCounter: 2,\n      source: {},\n      startValue: 0,\n      selectedPlant: 'wind',\n      selectedColor: 'black',\n      tidalValue: 50,\n      solarValue: 50,\n      windValue: 50,\n      data: {\n        nodes: [{\n          \"id\": \"id1\",\n          \"name\": \"name1\",\n          \"val\": 1,\n          isCity: false,\n          color: 'red'\n        }, {\n          \"id\": \"id2\",\n          \"name\": \"name2\",\n          \"val\": 0.5,\n          isCity: true\n        }],\n        links: [{\n          \"source\": \"id1\",\n          \"target\": \"id2\"\n        }]\n      }\n    };\n    this.handleAddNode = this.handleAddNode.bind(this);\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.handleSetSource = this.handleSetSource.bind(this);\n    this.handleRangeChange = this.handleRangeChange.bind(this);\n    this.handlePlantChange = this.handlePlantChange.bind(this);\n  }\n\n  handleAddNode(isCity) {\n    console.log(this.state.source.isCity);\n    var color;\n\n    if (isCity) {\n      color = 'black';\n    } else {\n      switch (this.state.selectedPlant) {\n        case 'wind':\n          color = 'grey';\n          break;\n\n        case 'tidal':\n          color = 'blue';\n          break;\n\n        case 'solar':\n          color = 'yellow';\n          break;\n\n        default:\n      }\n    }\n\n    if (Object.keys(this.state.source).length && this.state.source.isCity === !isCity) {\n      this.setState(prevState => ({\n        data: {\n          nodes: [...prevState.data.nodes, {\n            id: \"id\" + prevState.idCounter,\n            name: isCity ? 'City' + prevState.cityIdCounter : 'PowerPlant' + prevState.PPIdCounter,\n            val: prevState.startValue / 10,\n            isCity: isCity,\n            color: color\n          }],\n          links: [...prevState.data.links, {\n            source: \"id\" + prevState.idCounter,\n            target: prevState.source.id\n          }]\n        },\n        idCounter: prevState.idCounter + 1,\n        selectedColor: color,\n        cityIdCounter: prevState.cityIdCounter + 1,\n        //OBSOLETE\n        PPIdCounter: prevState.PPIdCounter + 1 //OBSOLETE\n\n      }));\n    }\n\n    console.log(this.state);\n  }\n\n  handleSetSource(source) {\n    console.log(source);\n    this.setState({\n      source: source\n    });\n  }\n\n  toggleDropDown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  handleRangeChange(event, string) {\n    switch (string) {\n      case 'tidal':\n        this.setState({\n          tidalValue: event.target.value\n        });\n        break;\n\n      case 'solar':\n        this.setState({\n          solarValue: event.target.value\n        });\n        break;\n\n      case 'wind':\n        this.setState({\n          windValue: event.target.value\n        });\n        break;\n\n      default:\n        this.setState({\n          startValue: event.target.value\n        });\n    }\n  }\n\n  handleTurn() {\n    return true;\n  }\n\n  getRandomInt(range) {\n    return Math.floor(Math.random() * range) - range / 2;\n  }\n\n  render() {\n    const data = this.state.data;\n    const sourceName = this.state.source.name;\n    const startValue = this.state.startValue;\n    const tidalValue = this.state.tidalValue;\n    const solarValue = this.state.solarValue;\n    const windValue = this.state.windValue;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"hallo\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"add a City\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"add a Power Plant\"), React.createElement(Button, {\n      onClick: () => this.handleTurn(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"One Turn\"), React.createElement(Dropdown, {\n      isOpen: this.state.dropdownOpen,\n      toggle: this.toggleDropDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(DropdownToggle, {\n      caret: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"FirstConnection\"), sourceName), React.createElement(DropdownMenu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.data.nodes.map((item, i) => React.createElement(DropdownItem, {\n      key: i,\n      onClick: () => this.handleSetSource(item, i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, item.name)))), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Starting Value: \", startValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"5\",\n      value: this.state.startValue,\n      onChange: () => this.handleRangeChange('start'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Tidal Value: \", tidalValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"5\",\n      value: this.state.tidalValue,\n      onChange: () => this.handleRangeChange('tidal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Solar Value: \", solarValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"5\",\n      value: this.state.solarValue,\n      onChange: () => this.handleRangeChange('solar'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Wind Value: \", windValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"5\",\n      value: this.state.windValue,\n      onChange: () => this.handleRangeChange('wind'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      tag: \"fieldset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      value: \"tidal\",\n      checked: this.state.selectedPlant === \"tidal\",\n      onChange: this.handlePlantChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), ' ', \"Tidal\")), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      value: \"solar\",\n      checked: this.state.selectedPlant === \"solar\",\n      onChange: this.handlePlantChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), ' ', \"Solar\")), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      value: \"wind\",\n      checked: this.state.selectedPlant === \"wind\",\n      onChange: this.handlePlantChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), ' ', \"Wind\")))), React.createElement(ForceGraph2D, {\n      graphData: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js"],"names":["React","Component","ForceGraph2D","Button","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","FormGroup","Label","Input","Try","constructor","props","handlePlantChange","changeEvent","setState","selectedPlant","target","value","state","dropdownOpen","idCounter","cityIdCounter","PPIdCounter","source","startValue","selectedColor","tidalValue","solarValue","windValue","data","nodes","isCity","color","links","handleAddNode","bind","toggleDropDown","handleSetSource","handleRangeChange","console","log","Object","keys","length","prevState","id","name","val","event","string","handleTurn","getRandomInt","range","Math","floor","random","render","sourceName","map","item","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, FormGroup, Label, Input } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nexport default class Try extends Component {\n    constructor(props) {\n        super(props);\n        // Don't call this.setState() here!\n        this.state = { \n            dropdownOpen: false,\n            idCounter: 3,\n            cityIdCounter: 2,\n            PPIdCounter:2,\n            source: {},\n            startValue: 0,\n            selectedPlant: 'wind',\n            selectedColor: 'black',\n            tidalValue: 50,\n            solarValue: 50,\n            windValue: 50,\n            data: {\n                nodes: [ \n                    { \n                      \"id\": \"id1\",\n                      \"name\": \"name1\",\n                      \"val\": 1,\n                      isCity: false, \n                      color: 'red',\n                      \n                      \n                    },\n                    { \n                      \"id\": \"id2\",\n                      \"name\": \"name2\",\n                      \"val\": 0.5,\n                      isCity: true,\n                    },\n                ],\n                links: [\n                    {\n                        \"source\": \"id1\",\n                        \"target\": \"id2\"\n                    },\n                ]\n            }\n        };\n        this.handleAddNode = this.handleAddNode.bind(this);\n        this.toggleDropDown = this.toggleDropDown.bind(this);\n        this.handleSetSource = this.handleSetSource.bind(this);\n        this.handleRangeChange = this.handleRangeChange.bind(this);\n        this.handlePlantChange = this.handlePlantChange.bind(this);\n    }\n    handleAddNode(isCity){\n        console.log(this.state.source.isCity)\n        var color\n        if(isCity){\n            color = 'black'\n        }   \n        else{\n            switch(this.state.selectedPlant){\n            case 'wind':\n                color = 'grey'\n                break;\n            case 'tidal':\n                color = 'blue'\n                break;\n            case 'solar':\n                color = 'yellow'\n                break;\n            default:\n            }\n        }\n        \n         \n        if(Object.keys(this.state.source).length && this.state.source.isCity === !isCity){\n            this.setState(prevState => ({\n                data: {\n                    nodes:[\n                        ...prevState.data.nodes,\n                        {\n                            id: \"id\" + prevState.idCounter,\n                            name: (isCity? 'City'+ prevState.cityIdCounter:'PowerPlant'+ prevState.PPIdCounter) ,\n                            val: prevState.startValue/10,\n                            isCity: isCity,\n                            color: color\n                        }                \n                    ],\n                    links: [\n\n                        ...prevState.data.links,\n                        {\n                            source: \"id\" + prevState.idCounter,\n                            target: prevState.source.id\n                        }\n                    ]\n                },\n                idCounter: prevState.idCounter + 1,\n                selectedColor: color,\n                cityIdCounter:  prevState.cityIdCounter + 1,//OBSOLETE\n                PPIdCounter:  prevState.PPIdCounter + 1,//OBSOLETE\n            }))\n        }\n        console.log(this.state)\n    }\n    handleSetSource(source){\n        console.log(source)\n        this.setState({\n            source: source\n        })\n    }\n    toggleDropDown() {\n        this.setState(prevState => ({\n          dropdownOpen: !prevState.dropdownOpen\n        }));\n    }\n    handleRangeChange(event,string){\n        switch(string){\n            \n            case 'tidal':\n                this.setState({tidalValue: event.target.value});\n                break;\n            case 'solar':\n                this.setState({solarValue: event.target.value});\n                break;\n            case 'wind':\n                this.setState({windValue: event.target.value});\n                break;\n            default:\n                this.setState({startValue: event.target.value});\n        }\n    }\n    handlePlantChange = changeEvent => {\n        this.setState({\n          selectedPlant: changeEvent.target.value\n        });\n      };\n    handleTurn(){\n        return true\n    }\n    getRandomInt(range){\n        return Math.floor(Math.random()*(range))-(range/2);\n    }\n    render() {\n        const data = this.state.data\n        const sourceName = this.state.source.name\n        const startValue = this.state.startValue\n        const tidalValue = this.state.tidalValue\n        const solarValue = this.state.solarValue\n        const windValue = this.state.windValue\n\n      return(\n          <div>\n            <p>hallo</p>\n            <Button onClick={()=>this.handleAddNode(true)}>add a City</Button>\n            <Button onClick={()=>this.handleAddNode(false)}>add a Power Plant</Button>\n            <Button onClick={()=>this.handleTurn()}>One Turn</Button>\n            <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropDown}>\n                <DropdownToggle caret>\n                    <p>FirstConnection</p>\n                    {sourceName}\n                </DropdownToggle>\n                <DropdownMenu>\n\n                {this.state.data.nodes.map((item, i )=> <DropdownItem key={i} onClick={() => this.handleSetSource(item, i)}>{item.name}</DropdownItem>)}\n\n                </DropdownMenu>\n            </Dropdown>\n            <label>Starting Value: {startValue}</label>\n            <input type=\"range\" max=\"100\" step=\"5\" value={this.state.startValue} onChange={() => this.handleRangeChange('start')}></input>\n            <label>Tidal Value: {tidalValue}</label>\n            <input type=\"range\" max=\"100\" step=\"5\" value={this.state.tidalValue} onChange={() => this.handleRangeChange('tidal')}></input>\n            <label>Solar Value: {solarValue}</label>\n            <input type=\"range\" max=\"100\" step=\"5\" value={this.state.solarValue} onChange={() => this.handleRangeChange('solar')}></input>\n            <label>Wind Value: {windValue}</label>\n            <input type=\"range\" max=\"100\" step=\"5\" value={this.state.windValue} onChange={() => this.handleRangeChange('wind')}></input>\n            <div>\n            <FormGroup tag=\"fieldset\">\n                <FormGroup check>\n                    <Label check>\n                    <Input type=\"radio\" name=\"radio1\" \n                        value={\"tidal\"}\n                        checked={this.state.selectedPlant === \"tidal\"}\n                        onChange={this.handlePlantChange}\n                    />{' '}\n                        Tidal \n                    </Label>\n                </FormGroup>\n                <FormGroup check>\n                    <Label check>\n                    <Input type=\"radio\" name=\"radio1\" \n                        value={\"solar\"}\n                        checked={this.state.selectedPlant === \"solar\"}\n                        onChange={this.handlePlantChange}\n                    />{' '}\n                        Solar\n                    </Label>\n                </FormGroup>\n                <FormGroup check>\n                    <Label check>\n                    <Input type=\"radio\" name=\"radio1\"\n                        value={\"wind\"}\n                        checked={this.state.selectedPlant === \"wind\"}\n                        onChange={this.handlePlantChange}\n                    />{' '}\n                        Wind\n                    </Label>\n                </FormGroup>\n            </FormGroup> \n            </div>\n            <ForceGraph2D graphData={data}></ForceGraph2D>\n\n          </div>\n          \n      )\n    }\n  }"]},"metadata":{},"sourceType":"module"}