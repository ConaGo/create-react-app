{"ast":null,"code":"var _jsxFileName = \"/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js\";\nimport React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, FormGroup, Label, Input } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst WIND = 'WIND';\nconst TIDAL = 'TIDAL';\nconst SOLAR = 'SOLAR';\nconst SATURATED = 'SATURATED';\nconst OVER_SATURATED = 'OVER_SATURATED';\nconst UNDER_SATURATED = 'UNDER_SATURATED';\nexport default class Try extends Component {\n  constructor(props) {\n    super(props); // Don't call this.setState() here!\n\n    this.handlePlantChange = changeEvent => {\n      this.setState({\n        selectedPlant: changeEvent.target.value\n      });\n    };\n\n    this.state = {\n      dropdownOpen: false,\n      idCounter: 5,\n      source: {},\n      startValue: 0,\n      selectedPlant: 'wind',\n      wind: 50,\n      tidal: 50,\n      solar: 50,\n      cities: {\n        1: {\n          currentSaturation: 0,\n          totalDemand: 250,\n          name: 'Berlin'\n        },\n        2: {\n          currentSaturation: 0,\n          totalDemand: 250,\n          name: 'Tokyo'\n        }\n      },\n      plants: {\n        3: {\n          multiplier: 1,\n          type: WIND,\n          connections: [{\n            1: 50\n          }],\n          previousDecisions: [SATURATED, OVER_SATURATED, SATURATED, OVER_SATURATED, UNDER_SATURATED]\n        },\n        4: {\n          multiplier: 1,\n          type: TIDAL,\n          connections: [{\n            1: 40\n          }, {\n            2: 60\n          }],\n          previousDecisions: [SATURATED, OVER_SATURATED, SATURATED, OVER_SATURATED, SATURATED]\n        }\n      },\n      data: {\n        nodes: [{\n          'id': 'id1',\n          'name': 'name1',\n          'val': 1,\n          isCity: false,\n          color: 'red'\n        }, {\n          'id': 'id2',\n          'name': 'name2',\n          'val': 0.5,\n          isCity: true\n        }],\n        links: [{\n          source: 'id1',\n          target: 'id2'\n        }]\n      }\n    };\n    this.handleAddNode = this.handleAddNode.bind(this);\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.handleSetSource = this.handleSetSource.bind(this);\n    this.handlePlantChange = this.handlePlantChange.bind(this);\n    this.handleStartValueChange = this.handleStartValueChange.bind(this);\n    this.handleTidalValueChange = this.handleTidalValueChange.bind(this);\n    this.handleSolarValueChange = this.handleSolarValueChange.bind(this);\n    this.handleWindValueChange = this.handleWindValueChange.bind(this);\n    this.handleTurn = this.handleTurn.bind(this);\n    this.formatData = this.formatData.bind(this);\n  }\n\n  handleAddNode(isCity) {\n    console.log(this.state.source.isCity);\n    var type;\n\n    if (isCity) {\n      type = 'black';\n    } else {\n      switch (this.state.selectedPlant) {\n        case 'wind':\n          type = WIND;\n          break;\n\n        case 'tidal':\n          type = TIDAL;\n          break;\n\n        case 'solar':\n          type = SOLAR;\n          break;\n\n        default:\n      }\n    }\n\n    if (Object.keys(this.state.source).length && this.state.source.isCity === !isCity) {\n      let cities = this.state.cities;\n      let id = this.state.idCounter;\n      let sourceID = this.state.source.id;\n      cities[id] = {\n        currentSaturation: 0,\n        name: 'City' + id,\n        totalDemand: this.state.startValue * 3\n      };\n\n      if (isCity) {\n        this.setState(prevState => ({\n          cities: cities,\n          idCounter: prevState.idCounter + 1\n        }));\n      } else {\n        let plants = this.state.plants;\n        plants[id] = {\n          multiplier: 1,\n          name: 'PowerPLant' + id,\n          type: type,\n          previousDecisions: [SATURATED, OVER_SATURATED, SATURATED, OVER_SATURATED, UNDER_SATURATED],\n          connections: [{\n            [this.state.source.id]: 0\n          }]\n        };\n        this.setState(prevState => ({\n          plants: plants,\n          links: [...prevState.data.links, {\n            source: prevState.idCounter,\n            target: prevState.source.id\n          }],\n          idCounter: prevState.idCounter + 1\n        }));\n      }\n    }\n\n    this.formatData();\n    console.log(this.state.links);\n  }\n\n  handleSetSource(source) {\n    console.log(source);\n    this.setState({\n      source: source\n    });\n  }\n\n  toggleDropDown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  handleStartValueChange(event) {\n    this.setState({\n      startValue: event.target.value\n    });\n  }\n\n  handleTidalValueChange(event) {\n    this.setState({\n      tidal: event.target.value\n    });\n  }\n\n  handleSolarValueChange(event) {\n    this.setState({\n      solar: event.target.value\n    });\n  }\n\n  handleWindValueChange(event) {\n    this.setState({\n      wind: event.target.value\n    });\n  }\n\n  handleTurn() {\n    let nodes = this.state.data.nodes;\n    const cities = nodes.filter(e => e.isCity);\n    console.log(cities);\n    const powerPlants = nodes.filter(e => !e.isCity);\n    console.log(powerPlants);\n    const links = this.state.data.links;\n    console.log(links);\n    console.log(cities);\n    console.log(powerPlants);\n    console.log(links); // recalculate base values\n    //  areAllPlantsEmpty = false => plants.filter(p.energyLeft).length === 0\n    //  areAllCitiesSaturated = false => cities.filter(!c.isSaturated).length === 0\n    //  iterate over plants as areAllPlantsEmpty || areAllCitiesSaturated\n    //      calculate plant_energy (floored value)\n    //      iterate over connections\n    //          if saturationRatio < 1 then move '10' plant_energy to city\n    //          else city.isSaturated = true\n    //      if plant_energy <= 0 then plant.energyLeft = false\n    //  iterate over plants\n    //      calculate sub-net saturation\n    //      plant.previousDecisions is\n    //      if saturationRation < 1 then UNDER_SATURATED\n    //      if saturationRation === 1 then SATURATED\n    //      if saturationRation > 1 then OVER_SATURATED\n    //\n    //  === decision making ===\n    //  iterate over plants\n    //      if previousDecisions.filter(v === UNDER_SATURATED).length > 0 then increase plant.multiplier by 0.1\n    //      else if previousDecisions.filter(v === OVER_SATURATED).length === 5 then decrease plant.multiplier by 0.1\n    //\n\n    this.formatData();\n  }\n\n  getRandomInt(range) {\n    return Math.floor(Math.random() * range) - range / 2;\n  }\n\n  formatData() {\n    let nodes = [];\n    let links = [];\n    let ids = Object.keys(this.state.cities);\n    let i = 0;\n    let e;\n\n    for (let nrr in this.state.cities) {\n      e = this.state.cities[nrr];\n      nodes.push({\n        id: ids[i++],\n        name: e.name,\n        val: e.totalDemand / 50,\n        isCity: true,\n        color: 'black'\n      });\n    }\n\n    let color;\n    let j = 0;\n    ids = Object.keys(this.state.plants);\n\n    for (let nr in this.state.plants) {\n      e = this.state.plants[nr];\n\n      switch (e.type) {\n        case WIND:\n          color = 'grey';\n          break;\n\n        case TIDAL:\n          color = 'blue';\n          break;\n\n        default:\n          color = 'yellow';\n      }\n\n      for (let c in e.connections) {\n        links.push({\n          source: ids[j],\n          target: Object.keys(e.connections[c]).toString()\n        });\n      }\n\n      nodes.push({\n        name: 'Plant' + ids[j],\n        id: ids[j++],\n        val: e.multiplier * 5,\n        isCity: false,\n        color: color\n      });\n    }\n\n    this.setState({\n      data: {\n        nodes: nodes,\n        links: links\n      }\n    }); // setTimeout(function(){\n    //     console.log(nodes)//do what you need here\n    //     console.log(links)\n    // }, 1);\n  }\n\n  render() {\n    const data = this.state.data;\n    const sourceName = this.state.source.name;\n    const startValue = this.state.startValue;\n    const tidalValue = this.state.tidalValue;\n    const solarValue = this.state.solarValue;\n    const windValue = this.state.windValue;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"hallo\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"add a City\"), React.createElement(Button, {\n      onClick: () => this.handleAddNode(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"add a Power Plant\"), React.createElement(Button, {\n      onClick: () => this.handleTurn(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"One Turn\"), React.createElement(Dropdown, {\n      isOpen: this.state.dropdownOpen,\n      toggle: this.toggleDropDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(DropdownToggle, {\n      caret: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"FirstConnection\"), sourceName), React.createElement(DropdownMenu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, this.state.data.nodes.filter(item => item.isCity).map((item, i) => React.createElement(DropdownItem, {\n      key: i,\n      onClick: () => this.handleSetSource(item, i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, item.name)))), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Starting Value: \", startValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"1\",\n      value: this.state.startValue,\n      onChange: this.handleStartValueChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Wave Value: \", tidalValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"1\",\n      value: this.state.tidal,\n      onChange: this.handleTidalValueChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Solar Value: \", solarValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"1\",\n      value: this.state.solar,\n      onChange: this.handleSolarValueChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Wind Value: \", windValue), React.createElement(\"input\", {\n      type: \"range\",\n      max: \"100\",\n      step: \"1\",\n      value: this.state.wind,\n      onChange: this.handleWindValueChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      tag: \"fieldset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      value: 'tidal',\n      checked: this.state.selectedPlant === 'tidal',\n      onChange: this.handlePlantChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), ' ', \"Tidal\")), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      value: 'solar',\n      checked: this.state.selectedPlant === 'solar',\n      onChange: this.handlePlantChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), ' ', \"Solar\")), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      value: 'wind',\n      checked: this.state.selectedPlant === 'wind',\n      onChange: this.handlePlantChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), ' ', \"Wind\")))), React.createElement(ForceGraph2D, {\n      graphData: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/lj/Git/myproject/AOT/aot_ha1/src/Graphs/try.js"],"names":["React","Component","ForceGraph2D","Button","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","FormGroup","Label","Input","WIND","TIDAL","SOLAR","SATURATED","OVER_SATURATED","UNDER_SATURATED","Try","constructor","props","handlePlantChange","changeEvent","setState","selectedPlant","target","value","state","dropdownOpen","idCounter","source","startValue","wind","tidal","solar","cities","currentSaturation","totalDemand","name","plants","multiplier","type","connections","previousDecisions","data","nodes","isCity","color","links","handleAddNode","bind","toggleDropDown","handleSetSource","handleStartValueChange","handleTidalValueChange","handleSolarValueChange","handleWindValueChange","handleTurn","formatData","console","log","Object","keys","length","id","sourceID","prevState","event","filter","e","powerPlants","getRandomInt","range","Math","floor","random","ids","i","nrr","push","val","j","nr","c","toString","render","sourceName","tidalValue","solarValue","windValue","item","map","display","flexDirection"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {ForceGraph2D} from 'react-force-graph'\nimport {Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, FormGroup, Label, Input} from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst WIND = 'WIND'\nconst TIDAL = 'TIDAL'\nconst SOLAR = 'SOLAR'\n\nconst SATURATED = 'SATURATED'\nconst OVER_SATURATED = 'OVER_SATURATED'\nconst UNDER_SATURATED = 'UNDER_SATURATED'\n\nexport default class Try extends Component {\n    constructor(props) {\n        super(props)\n        // Don't call this.setState() here!\n        this.state = {\n            dropdownOpen: false,\n            idCounter: 5,\n            source: {},\n            startValue: 0,\n            selectedPlant: 'wind',\n            wind: 50,\n            tidal: 50,\n            solar: 50,\n            cities: {\n                1: {\n                    currentSaturation: 0,\n                    totalDemand: 250,\n                    name: 'Berlin'\n                }\n                ,\n                2: {\n                    currentSaturation: 0,\n                    totalDemand: 250,\n                    name: 'Tokyo'\n                }\n            },\n            plants: {\n                3: {\n                    multiplier: 1,\n                    type: WIND,\n                    connections: [{1: 50}],\n                    previousDecisions: [SATURATED, OVER_SATURATED, SATURATED, OVER_SATURATED, UNDER_SATURATED],\n                },\n                4: {\n                    multiplier: 1,\n                    type: TIDAL,\n                    connections: [{1: 40}, {2: 60}],\n                    previousDecisions: [SATURATED, OVER_SATURATED, SATURATED, OVER_SATURATED, SATURATED],\n                }\n            },\n            data: {\n                nodes: [\n                    {\n                        'id': 'id1',\n                        'name': 'name1',\n                        'val': 1,\n                        isCity: false,\n                        color: 'red',\n\n\n                    },\n                    {\n                        'id': 'id2',\n                        'name': 'name2',\n                        'val': 0.5,\n                        isCity: true,\n                    },\n                ],\n                links: [\n                    {\n                        source: 'id1',\n                        target: 'id2'\n                    },\n                ]\n            },\n        }\n        this.handleAddNode = this.handleAddNode.bind(this)\n        this.toggleDropDown = this.toggleDropDown.bind(this)\n        this.handleSetSource = this.handleSetSource.bind(this)\n        this.handlePlantChange = this.handlePlantChange.bind(this)\n        this.handleStartValueChange = this.handleStartValueChange.bind(this)\n        this.handleTidalValueChange = this.handleTidalValueChange.bind(this)\n        this.handleSolarValueChange = this.handleSolarValueChange.bind(this)\n        this.handleWindValueChange = this.handleWindValueChange.bind(this)\n        this.handleTurn = this.handleTurn.bind(this)\n        this.formatData = this.formatData.bind(this)\n    }\n\n    handleAddNode(isCity) {\n        console.log(this.state.source.isCity)\n        var type\n        if (isCity) {\n            type = 'black'\n        } else {\n            switch (this.state.selectedPlant) {\n                case 'wind':\n                    type = WIND\n                    break\n                case 'tidal':\n                    type = TIDAL\n                    break\n                case 'solar':\n                    type = SOLAR\n                    break\n                default:\n            }\n        }\n\n\n        if (Object.keys(this.state.source).length && this.state.source.isCity === !isCity) {\n            let cities = this.state.cities\n            let id = this.state.idCounter\n            let sourceID = this.state.source.id\n            cities[id] = {\n                currentSaturation: 0,\n                name: 'City' + id,\n                totalDemand: this.state.startValue * 3,\n            }\n            if(isCity){this.setState(prevState => ({\n               cities:cities,    \n                \n                idCounter: prevState.idCounter + 1,\n                \n            }))\n\n            }else{\n                let plants = this.state.plants\n                plants[id] = {\n                    multiplier: 1,\n                    name: 'PowerPLant' + id,\n                    type: type,\n                    previousDecisions: [SATURATED, OVER_SATURATED, SATURATED, OVER_SATURATED, UNDER_SATURATED],\n                    connections:[{[this.state.source.id]:0}]\n                }\n                this.setState(prevState => ({\n                    plants:plants,\n                    links: [\n                        ...prevState.data.links,\n                        {\n                            source: prevState.idCounter,\n                            target: prevState.source.id\n                        }\n                    ],\n                    idCounter: prevState.idCounter + 1,\n                    \n                }))\n\n\n\n            }\n            \n        }\n       this.formatData()\n       console.log(this.state.links)\n    }\n\n    handleSetSource(source) {\n        console.log(source)\n        this.setState({\n            source: source\n        })\n    }\n\n    toggleDropDown() {\n        this.setState(prevState => ({\n            dropdownOpen: !prevState.dropdownOpen\n        }))\n    }\n\n    handleStartValueChange(event) {\n        this.setState({startValue: event.target.value})\n    }\n\n    handleTidalValueChange(event) {\n        this.setState({tidal: event.target.value})\n    }\n\n    handleSolarValueChange(event) {\n        this.setState({solar: event.target.value})\n    }\n\n    handleWindValueChange(event) {\n        this.setState({wind: event.target.value})\n    }\n\n    handlePlantChange = changeEvent => {\n        this.setState({\n            selectedPlant: changeEvent.target.value\n        })\n    }\n\n    handleTurn() {\n        let nodes = this.state.data.nodes\n        const cities = nodes.filter(e => e.isCity)\n        console.log(cities)\n        const powerPlants = nodes.filter(e => !e.isCity)\n        console.log(powerPlants)\n        const links = this.state.data.links\n        console.log(links)\n        \n        console.log(cities)\n        console.log(powerPlants)\n        console.log(links)\n\n        // recalculate base values\n\n        //  areAllPlantsEmpty = false => plants.filter(p.energyLeft).length === 0\n        //  areAllCitiesSaturated = false => cities.filter(!c.isSaturated).length === 0\n        //  iterate over plants as areAllPlantsEmpty || areAllCitiesSaturated\n        //      calculate plant_energy (floored value)\n        //      iterate over connections\n        //          if saturationRatio < 1 then move '10' plant_energy to city\n        //          else city.isSaturated = true\n        //      if plant_energy <= 0 then plant.energyLeft = false\n\n        //  iterate over plants\n        //      calculate sub-net saturation\n        //      plant.previousDecisions is\n            //      if saturationRation < 1 then UNDER_SATURATED\n            //      if saturationRation === 1 then SATURATED\n            //      if saturationRation > 1 then OVER_SATURATED\n        //\n\n        //  === decision making ===\n        //  iterate over plants\n        //      if previousDecisions.filter(v === UNDER_SATURATED).length > 0 then increase plant.multiplier by 0.1\n        //      else if previousDecisions.filter(v === OVER_SATURATED).length === 5 then decrease plant.multiplier by 0.1\n        //\n        this.formatData()\n    }\n\n    getRandomInt(range) {\n        return Math.floor(Math.random() * (range)) - (range / 2)\n    }\n\n    formatData() {\n        let nodes = []\n        let links = []\n        let ids = Object.keys(this.state.cities)\n        let i = 0\n        let e\n        for (let nrr in this.state.cities){\n            e = this.state.cities[nrr]\n            nodes.push({\n                id:ids[i++],\n                name:e.name,\n                val:e.totalDemand/50,\n                isCity:true,\n                color:'black'\n            })\n        }\n        let color\n        let j = 0\n        \n        ids = Object.keys(this.state.plants)\n        for (let nr in this.state.plants){\n            e = this.state.plants[nr]\n            switch(e.type){\n                case WIND:\n                    color = 'grey'\n                    break\n                case TIDAL:\n                    color = 'blue'\n                    break;\n                default:\n                    color = 'yellow'\n            }\n            for (let c in e.connections){\n               links.push({\n                   source: ids[j],\n                   target: Object.keys(e.connections[c]).toString()\n               }) \n            }  \n            nodes.push({\n                name:'Plant'+(ids[j]),\n                id:ids[j++],\n                val:e.multiplier*5,\n                isCity:false,\n                color:color\n            })\n            \n        }    \n        \n        this.setState({\n            data:{\n                nodes: nodes,\n                links: links\n            }\n        })\n        // setTimeout(function(){\n        //     console.log(nodes)//do what you need here\n        //     console.log(links)\n        // }, 1);\n        \n    }\n    render() {\n        const data = this.state.data\n        const sourceName = this.state.source.name\n        const startValue = this.state.startValue\n        const tidalValue = this.state.tidalValue\n        const solarValue = this.state.solarValue\n        const windValue = this.state.windValue\n\n        return (\n            <div>\n                <p>hallo</p>\n                <Button onClick={() => this.handleAddNode(true)}>add a City</Button>\n                <Button onClick={() => this.handleAddNode(false)}>add a Power Plant</Button>\n                <Button onClick={() => this.handleTurn()}>One Turn</Button>\n                <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropDown}>\n                    <DropdownToggle caret>\n                        <p>FirstConnection</p>\n                        {sourceName}\n                    </DropdownToggle>\n                    <DropdownMenu>\n\n                        {this.state.data.nodes.filter((item)=>item.isCity).map((item, i) => <DropdownItem key={i}\n                                                                              onClick={() => this.handleSetSource(item, i)}>{item.name}</DropdownItem>)}\n\n                    </DropdownMenu>\n                </Dropdown>\n                <div style={{display: 'flex', flexDirection: 'column'}}>\n                    <label>Starting Value: {startValue}</label>\n                    <input type=\"range\" max=\"100\" step=\"1\" value={this.state.startValue}\n                           onChange={this.handleStartValueChange}></input>\n                    <label>Wave Value: {tidalValue}</label>\n                    <input type=\"range\" max=\"100\" step=\"1\" value={this.state.tidal}\n                           onChange={this.handleTidalValueChange}></input>\n                    <label>Solar Value: {solarValue}</label>\n                    <input type=\"range\" max=\"100\" step=\"1\" value={this.state.solar}\n                           onChange={this.handleSolarValueChange}></input>\n                    <label>Wind Value: {windValue}</label>\n                    <input type=\"range\" max=\"100\" step=\"1\" value={this.state.wind}\n                           onChange={this.handleWindValueChange}></input>\n                </div>\n\n                <div>\n                    <FormGroup tag=\"fieldset\">\n                        <FormGroup check>\n                            <Label check>\n                                <Input type=\"radio\" name=\"radio1\"\n                                       value={'tidal'}\n                                       checked={this.state.selectedPlant === 'tidal'}\n                                       onChange={this.handlePlantChange}\n                                />{' '}\n                                Tidal\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input type=\"radio\" name=\"radio1\"\n                                       value={'solar'}\n                                       checked={this.state.selectedPlant === 'solar'}\n                                       onChange={this.handlePlantChange}\n                                />{' '}\n                                Solar\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input type=\"radio\" name=\"radio1\"\n                                       value={'wind'}\n                                       checked={this.state.selectedPlant === 'wind'}\n                                       onChange={this.handlePlantChange}\n                                />{' '}\n                                Wind\n                            </Label>\n                        </FormGroup>\n                    </FormGroup>\n                </div>\n                <ForceGraph2D graphData={data}></ForceGraph2D>\n\n            </div>\n\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}